Passos para os testes

1. START SERVIÇOS e DESLIGUE
docker compose up -d
docker compose down


2. FAZER TEST PLAYWRIGHT


3. CONEXAO BANCO
- Instalar npm i pg-promisse  .............serve para conectar com banco dados sql usando node.js
- Instalar pasta support e um arquivo db.js e importa o modulo
- Pegar informações do banco no arquivo docker compose
- fazer configuração e criar a função do select, delete, insert etc...
- abrir PGAdmin e fazer as configurações do banco que estao no docker compose

QUERY POR USUARIO
SELECT t.code
	    FROM public."TwoFactorCode" t
		JOIN public."User" u ON u."id" = t."userId"
		WHERE u."cpf" = '${cpf}'
	    ORDER BY t.id DESC
	    LIMIT 1;

QUERY ULTIMO AUTENTICADOR
SELECT code
FROM public."TwoFactorCode"
ORDER BY id DESC
LIMIT 1;

4-Rodar testes
npx playwright test --ui

5- USANDO PAGE OBJECTS COMO PADRÃO DE PROJETO
- dentro da raiz criar pasta pages
- dentro da pasta pages criar novo arquivo chamado LoginPage.js
- dentro da pasta pages criar novo arquivo chamado DashPage.js

6- CONSUMINDO FILA REDIS
Não utilizaremos este serviço

7- CRIAR ARQUIVO DOCKERFILE COM AS CONFIGURAÇÕES DO SERVIDOR DO KENJINS
- COPIAR SCRIPT ARQUIVO SERVIDOR JENKINS
- ENTRAR http://jenkins-server:8080
- CRIAR JOBS DE PIPELINE

8- CRIAR ARQUIVO Jenkinsfile com o script de pipeline e subir projeto no github
9- IR JO KENKINS E RODAR O JOB
- FALHA POIS PRECISA DA IMAGEM docker pull mcr.microsoft.com/playwright:v1.51.1-noble

10- REPORT
- INSTALAR PLUGIN ALLURE NO JENKINS
- INSTALAR PROJETO, npm install -D allure-playwright
- TROCAR CONFIG.js  reporter: 'allure-playwright',
- instalar linha comando   reporter: 'allure-playwright',
- npx allure serve
- acrescentar no .gitigone allure-results
- instalar instrução do jenkins
allure includeProperties: false, jdk: '', results: [[path: 'allure-results']] e coloca na pipeline depois do test